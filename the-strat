use case switches


LIST OF 4 DIRECTIONS
functions remove direction based on priority
1. don't run into yourself
2. don't run into walls
3. don't run into snakes

if list count==1 execute that move

CASES:





circle safe food using snake and wall and food data
safe food: any food that our snake can get to FIRST

treat snake body like wall

priority 1: get out of the way of snakes
priority 2: no walls

change priority for cases?

any snake within one block - take action

if snake head of SMALLER snake is adjacent - kill


Step 1: snake that doesn’t run into walls
Step 2: snake that doesn’t run into snakes
Step 3: any food
Step 4: closest 
Step 5: circle food until low health then eat
Step 6: safe food

INFORMATION WE HAVE
-food array
-game id
-height
-width
-array of snakes
-current turn
-your unique id

L[up down left right]

Def dir(x0 y0 x1 y1)
    Return (x0-x1) and (y0-y1)

Def check body(L)
     Mybody = Dir(self[0],self[1])
     L.remove(mybody)
     Return L

Def check wall(L)
    #check for closest wall, if next to wall remove direction from list
    Return(L)

Def checkenemies(L)
    #check for closest enemies, remove from list
    Return (L)

Def checkheads(L)
    #check enemy heads
    Return L

Def generate path()
    #if a safe path to food exists, generate a list of moves to get there and override other functions
    Return list of moves

If priority moves.len!=0
    Rtrn = priority moves[0]
    Priority moves.pop front
    Return move = rtrn

Elif L.len == 1
    Move = L[0]
Elif
    Check closest safe food, or loop to tail
